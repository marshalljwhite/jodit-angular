{"version":3,"sources":["ng://jodit-angular/lib/Events.ts","ng://jodit-angular/lib/jodit-angular.component.ts","ng://jodit-angular/lib/jodit-angular.module.ts"],"names":["Events","this","onChange","EventEmitter","onBeforeEnter","onKeydown","onMousedown","onClick","onFocus","onBlur","onPaste","onResize","onBeforeCommand","onAfterCommand","onAfterExec","onAfterPaste","onChangeSelection","Output","validEvents","EditorModule","require","CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","JoditAngularComponent","multi","_super","elementRef","ngZone","_this","call","_config","tagName","__extends","Object","defineProperty","prototype","v","element","resetEditor","createElement","document","id","nativeElement","appendChild","editor","getEditorValue","setEditorValue","defaultValue","destruct","createEditor","ngAfterViewInit","runOutsideAngular","Jodit","config","value","events","on","onChangeCallback","run","onTouchedCallback","forEach","eventName","eventEmitter","observers","length","eventNameInJodit","substring","substr","toLowerCase","args","_i","arguments","emit","ngOnDestroy","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","setReadOnly","Component","selector","template","encapsulation","ViewEncapsulation","None","providers","ElementRef","NgZone","Input","JoditAngularModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import {Output, EventEmitter} from '@angular/core';\r\n\r\nexport interface EventObj {\r\n  args: any[];\r\n  editor: any;\r\n}\r\n\r\nexport class Events {\r\n  // tslint:disable:no-output-on-prefix\r\n  @Output() onChange: EventEmitter<EventObj> = new EventEmitter();\r\n  @Output() onBeforeEnter: EventEmitter<EventObj> = new EventEmitter(false);\r\n  @Output() onKeydown: EventEmitter<EventObj> = new EventEmitter(false);\r\n  @Output() onMousedown: EventEmitter<EventObj> = new EventEmitter(false);\r\n  @Output() onClick: EventEmitter<EventObj> = new EventEmitter(false);\r\n  @Output() onFocus: EventEmitter<EventObj> = new EventEmitter();\r\n  @Output() onBlur: EventEmitter<EventObj> = new EventEmitter();\r\n  @Output() onPaste: EventEmitter<EventObj> = new EventEmitter(false);\r\n  @Output() onResize: EventEmitter<EventObj> = new EventEmitter();\r\n  @Output() onBeforeCommand: EventEmitter<EventObj> = new EventEmitter(false);\r\n  @Output() onAfterCommand: EventEmitter<EventObj> = new EventEmitter();\r\n  @Output() onAfterExec: EventEmitter<EventObj> = new EventEmitter();\r\n  @Output() onAfterPaste: EventEmitter<EventObj> = new EventEmitter();\r\n  @Output() onChangeSelection: EventEmitter<EventObj> = new EventEmitter();\r\n}\r\n\r\n\r\nexport const validEvents: (keyof Events)[] = [\r\n  'onChange',\r\n  'onBeforeEnter',\r\n  'onKeydown',\r\n  'onMousedown',\r\n  'onClick',\r\n  'onFocus',\r\n  'onBlur',\r\n  'onPaste',\r\n  'onResize',\r\n  'onBeforeCommand',\r\n  'onAfterCommand',\r\n  'onAfterExec',\r\n  'onAfterPaste',\r\n  'onChangeSelection',\r\n];\r\n","import {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    EventEmitter,\n    forwardRef,\n    Input,\n    NgZone,\n    OnDestroy,\n    Provider,\n    ViewEncapsulation\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Events, validEvents} from './Events';\n\n\ndeclare const require: any;\nconst EditorModule: any = require('jodit');\n\n\nconst CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR: Provider = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => JoditAngularComponent),\n    multi: true\n};\n\n@Component({\n    selector: 'jodit-editor',\n    template: `\n        <ng-template></ng-template>`,\n    encapsulation: ViewEncapsulation.None,\n    styleUrls: ['../../../../node_modules/jodit/build/jodit.min.css'],\n    providers: [CUSTOM_INPUT_CONTROL_VALUE_ACCESSOR]\n})\nexport class JoditAngularComponent extends Events implements AfterViewInit, OnDestroy, ControlValueAccessor {\n\n    @Input()\n    set config(v: object | undefined) {\n        this._config = v;\n        if (this.element) {\n            this.resetEditor();\n        }\n    }\n\n    get config() {\n        return this._config;\n    }\n\n    private _config = {};\n\n    @Input() tagName = 'textarea';\n    @Input() id: string | undefined;\n    @Input() defaultValue: string | undefined;\n\n    element: HTMLElement;\n    editor: any;\n\n    private onChangeCallback: (_: any) => {};\n    private onTouchedCallback: () => {};\n\n    constructor(private elementRef: ElementRef, private ngZone: NgZone) {\n        super();\n        this.elementRef = elementRef;\n        this.ngZone = ngZone;\n    }\n\n    createElement() {\n        const tagName = typeof this.tagName === 'string' ? this.tagName : 'textarea';\n        this.element = document.createElement(tagName);\n        if (this.element) {\n            this.element.id = this.id;\n            this.elementRef.nativeElement.appendChild(this.element);\n        }\n    }\n\n\n    get value(): string {\n        if (this.editor) {\n            return this.editor.getEditorValue();\n        } else {\n            return '';\n        }\n    }\n\n    set value(v: string) {\n        if (this.editor) {\n            this.editor.setEditorValue(v || '');\n        } else {\n            this.defaultValue = v;\n        }\n    }\n\n    resetEditor() {\n        this.editor.destruct();\n        this.createEditor();\n    }\n\n    ngAfterViewInit() {\n        if (!this.element) {\n            this.createElement();\n            this.createEditor();\n        }\n    }\n\n    createEditor() {\n        // Create instance outside Angular scope\n        this.ngZone.runOutsideAngular(() => {\n            this.editor = new EditorModule.Jodit(this.element, this.config);\n        });\n\n        if (this.defaultValue) {\n            this.editor.value = this.defaultValue;\n        }\n\n        this.editor.events\n            .on('change', (value: string) => {\n                if (typeof this.onChangeCallback === 'function') {\n                    this.ngZone.run(() => this.onChangeCallback(value));\n                }\n            })\n            .on('blur', () => {\n                if (typeof this.onTouchedCallback === 'function') {\n                    this.ngZone.run(() => this.onTouchedCallback());\n                }\n            });\n\n\n        validEvents.forEach((eventName) => {\n            const eventEmitter: EventEmitter<any> = this[eventName];\n            if (eventEmitter.observers.length > 0) {\n                let eventNameInJodit = eventName.substring(2);\n                eventNameInJodit = eventNameInJodit.substr(0, 1).toLowerCase() + eventNameInJodit.substring(1);\n                // tslint:disable-next-line:max-line-length\n                this.editor.events.on(eventNameInJodit, this.ngZone.run(() => (...args: any[]) => eventEmitter.emit({\n                    args,\n                    editor: this.editor\n                })));\n            }\n        });\n    }\n\n    ngOnDestroy() {\n        if (this.editor) {\n            this.editor.destruct();\n        }\n    }\n\n    writeValue(v: any): void {\n        this.value = v;\n    }\n\n    registerOnChange(fn: any): void {\n        this.onChangeCallback = fn;\n    }\n\n    registerOnTouched(fn: () => {}): void {\n        this.onTouchedCallback = fn;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n        this.editor.setReadOnly(isDisabled);\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { JoditAngularComponent } from './jodit-angular.component';\n\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [JoditAngularComponent],\n  exports: [\n      JoditAngularComponent\n  ]\n})\n\nexport class JoditAngularModule { }\n"]}